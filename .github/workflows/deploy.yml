name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Check for changes in the api folder
        id: check_changes
        run: |
          git fetch origin ${{ github.event.before }}
          if git diff --quiet ${{ github.event.before }} HEAD -- api; then
            echo "No changes in the api folder"
            echo "::set-output name=changes::false"
          else
            echo "Changes detected in the api folder"
            echo "::set-output name=changes::true"
          fi

      - name: Exit if no changes in the api folder
        if: steps.check_changes.outputs.changes == 'false'
        run: |
          echo "No changes detected in the api folder, exiting..."
          exit 1
        continue-on-error: true

      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.changes == 'true'
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        if: steps.check_changes.outputs.changes == 'true'
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up QEMU
        if: steps.check_changes.outputs.changes == 'true'
        uses: docker/setup-qemu-action@v1

      - name: Log in to Docker Hub
        if: steps.check_changes.outputs.changes == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create .env file
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> ./api/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> ./api/.env
          echo "ALGORITHM=${{ vars.ALGORITHM}}" >> ./api/.env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES}}" >> ./api/.env
          echo "POSTGRES_HOST=${{secrets.POSTGRES_HOST}}" >> ./api/.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> ./api/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> ./api/.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> ./api/.env
          echo "POSTGRES_PORT=5432" >> ./api/.env
          echo "DEV_MODE=${{vars.DEV_MODE}}" >> ./api/.env
          echo "SEED_DATA=${{vars.SEED_DATA}}" >> ./api/.env
          echo "DEFAULT_RESPONSE_LIMIT=10" >> ./api/.env
          echo "PYTHONUNBUFFERED=1" >> ./api/.env

      - name: Build and push Docker image
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          docker build --target production -t ${{ secrets.DOCKER_USERNAME }}/vinylflamingo-feeback-api:latest ./api
          docker push ${{ secrets.DOCKER_USERNAME }}/vinylflamingo-feeback-api:latest

      - name: Setup SSH key
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DIGITALOCEAN_SSH_KEY }}" | tr -d '\r' | cat > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add DigitalOcean to known_hosts
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          ssh-keyscan -H ${{ secrets.DIGITALOCEAN_HOST }} >> ~/.ssh/known_hosts

      - name: Cleanup old containers and volumes
        if: steps.check_changes.outputs.changes == 'true'
        env:
          SSH_PRIVATE_KEY: ~/.ssh/id_rsa
        run: |
          ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${{ secrets.DIGITALOCEAN_USER }}@${{ secrets.DIGITALOCEAN_HOST }} "docker compose -f /opt/vinylflamingo-feedback-app/docker-compose.yml -f /opt/vinylflamingo-feedback-app/docker-compose.prod.yml down -v"

      - name: Deploy to DigitalOcean
        if: steps.check_changes.outputs.changes == 'true'
        env:
          SSH_PRIVATE_KEY: ~/.ssh/id_rsa
        run: |
          scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./api/docker-compose.yml ./api/docker-compose.prod.yml ./api/.env ${{ secrets.DIGITALOCEAN_USER }}@${{ secrets.DIGITALOCEAN_HOST }}:/opt/vinylflamingo-feedback-app
          ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${{ secrets.DIGITALOCEAN_USER }}@${{ secrets.DIGITALOCEAN_HOST }} "cd /opt/vinylflamingo-feedback-app && docker pull ${{ secrets.DOCKER_USERNAME }}/vinylflamingo-feedback-api:latest && docker compose --env-file .env -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans"
